{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_maxWhitelistedAddresses",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addWhitelistAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxWhitelistedAddresses",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numAdressesWhitelisted",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "608060405234801561001057600080fd5b506040516105d83803806105d883398181016040528101906100329190610090565b806000806101000a81548160ff021916908360ff160217905550506100bd565b600080fd5b600060ff82169050919050565b61006d81610057565b811461007857600080fd5b50565b60008151905061008a81610064565b92915050565b6000602082840312156100a6576100a5610052565b5b60006100b48482850161007b565b91505092915050565b61050c806100cc6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306c933d81461005157806331a72188146100815780638570acc01461009f578063aa1e559e146100bd575b600080fd5b61006b600480360381019061006691906102ef565b6100c7565b6040516100789190610337565b60405180910390f35b6100896100e7565b604051610096919061036e565b60405180910390f35b6100a76100f8565b6040516100b4919061036e565b60405180910390f35b6100c561010b565b005b60016020528060005260406000206000915054906101000a900460ff1681565b60008054906101000a900460ff1681565b600260009054906101000a900460ff1681565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610198576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018f906103e6565b60405180910390fd5b60008054906101000a900460ff1660ff16600260009054906101000a900460ff1660ff16106101fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101f390610452565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600260008282829054906101000a900460ff1661027291906104a1565b92506101000a81548160ff021916908360ff160217905550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102bc82610291565b9050919050565b6102cc816102b1565b81146102d757600080fd5b50565b6000813590506102e9816102c3565b92915050565b6000602082840312156103055761030461028c565b5b6000610313848285016102da565b91505092915050565b60008115159050919050565b6103318161031c565b82525050565b600060208201905061034c6000830184610328565b92915050565b600060ff82169050919050565b61036881610352565b82525050565b6000602082019050610383600083018461035f565b92915050565b600082825260208201905092915050565b7f53656e64657220697320616c72656164792077686974656c69737465642e0000600082015250565b60006103d0601e83610389565b91506103db8261039a565b602082019050919050565b600060208201905081810360008301526103ff816103c3565b9050919050565b7f4d6178206e756d626572206f662061646472657373657320726561636865642e600082015250565b600061043c602083610389565b915061044782610406565b602082019050919050565b6000602082019050818103600083015261046b8161042f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006104ac82610352565b91506104b783610352565b9250828201905060ff8111156104d0576104cf610472565b5b9291505056fea2646970667358221220bcde88f5c5901418bb344c03fdc6e0c6da6a91af714e46ae1a82a9f60dff887b64736f6c63430008110033",
  "solidity_code": "// SPXD-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n    @notice This is a contract that can be used to white list addresses. The way adresses are whitelisted\n            in this contract is called primitive as it is relatively unefficient in regard to gas usage.\n*/\ncontract PrimitiveWhitelist {\n    uint8 public maxWhitelistedAddresses;\n    mapping(address => bool) public whitelistedAddresses;\n    uint8 public numAdressesWhitelisted;\n\n    constructor(uint8 _maxWhitelistedAddresses) {\n        maxWhitelistedAddresses = _maxWhitelistedAddresses;\n    }\n\n    function addWhitelistAddress() public {\n        require(!whitelistedAddresses[msg.sender], \"Sender is already whitelisted.\");\n        require(numAdressesWhitelisted < maxWhitelistedAddresses, \"Max number of addresses reached.\");\n\n        whitelistedAddresses[msg.sender] = true;\n        numAdressesWhitelisted += 1;\n    }\n}"
}